{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/login/auth-reducer.ts","features/login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","authAPI","data","post","delete","get","todolistsAPI","title","id","put","todolistId","taskId","model","initialState","status","error","setAppErrorAC","type","setAppStatusAC","handleServerAppError","dispatch","messages","length","handleServerNetworkError","message","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","isLoggedIn","auth","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","navigate","useNavigate","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","isInitialised","setIsLoggedInAC","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","finally","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","name","handleChange","FormControlLabel","control","App","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","path","element","to","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60a37406.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    // headers: {\r\n    //     'API-KEY': '8dabf8d5-133c-401a-b761-a0dd6d5b8f9a'\r\n    // }\r\n})\r\n\r\n// api\r\nexport const authAPI = {\r\n    login(data : LoginRequestType){\r\n        return instance.post< LoginReponseType >('auth/login', data)\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/login')\r\n    },\r\n    me() {\r\n        return instance.get< LoginReponseType >('auth/me')\r\n    }\r\n}\r\n\r\nexport type LoginRequestType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe?: boolean,\r\n    captcha?: boolean,\r\n}\r\n\r\nexport type LoginReponseType = {\r\n    resultCode: number,\r\n    messages: Array<any>\r\n    data: { userId: number}\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer'\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector((state: AppRootStateType)  => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    const navigate = useNavigate();\r\n    if(!isLoggedIn) navigate('/login')\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {authAPI} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    isInitialised: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        case 'login/SET-IS-INITIALISED':\r\n            return {...state, isInitialised: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\nexport const setIsInitialisedAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-INITIALISED', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: any) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n            } else {\r\n                handleServerAppError(res.data as any, dispatch)\r\n            }\r\n        })\r\n        .catch(e => handleServerNetworkError(e, dispatch))\r\n        .finally(() => dispatch(dispatch(setAppStatusAC('idle'))))\r\n}\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n        } else {\r\n            handleServerAppError(res.data as any, dispatch)\r\n        }\r\n    })\r\n        .catch(e => handleServerNetworkError(e, dispatch))\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC('idle'))\r\n            dispatch(setIsInitialisedAC(true))\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n\r\n// types\r\ntype ActionsType =\r\n    |ReturnType<typeof setIsLoggedInAC>\r\n    |ReturnType <typeof setIsInitialisedAC>\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\n\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate, useNavigate} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    const isLoggedIn = useSelector((state: AppRootStateType)  => state.auth.isLoggedIn)\r\n    const navigate = useNavigate();\r\n    if(isLoggedIn) navigate('/')\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={(e)=> {\r\n                formik.handleSubmit(e);\r\n            }\r\n            }>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                                   error={!!formik.errors.email && formik.touched.email}\r\n                                   helperText={formik.touched.email ? formik.errors.email : ''}\r\n                        />\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   name={'password'}\r\n                                   value={formik.values.password}\r\n                                   onChange={formik.handleChange}\r\n                        />\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox/>}\r\n                                          name={'rememberMe'}\r\n                                          checked={formik.values.rememberMe}\r\n                                          onChange={formik.handleChange}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../features/login/Login\";\r\nimport {initializeAppTC, logoutTC} from \"../features/login/auth-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialised = useSelector<AppRootStateType, boolean>((state) => state.auth.isInitialised)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialised) return <span>крутилка..</span>\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn &&  <Button color=\"inherit\" onClick={()=>dispatch(logoutTC())}>Log out</Button>}\r\n                        </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                        </AppBar>\r\n                        <Container fixed>\r\n\r\n                        <Routes>\r\n                        <Route path='/' element={<TodolistsList demo={demo}/>}/>\r\n                        <Route path='/login' element={<Login/>}/>\r\n\r\n                        <Route path='/404' element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                        <Route path=\"*\" element={<Navigate to='/404/'/>}/>\r\n                        </Routes>\r\n\r\n                        </Container>\r\n                        </div>\r\n                        )\r\n                    }\r\n\r\n                    export default App\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from \"../features/login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}